import React, { useState, useEffect } from 'react';
import api from '../services/api';
import TransactionForm from '../components/TransactionForm';
import TransactionList from '../components/TransactionList';
import { Pie } from 'react-chartjs-2';
import { Line } from 'react-chartjs-2';
import * as XLSX from 'xlsx';
import {
    Chart as ChartJS,
    Title,
    Tooltip,
    Legend,
    ArcElement,
    LineElement,
    PointElement,
    CategoryScale,
    LinearScale
} from 'chart.js';

ChartJS.register(Title, Tooltip, Legend, ArcElement, LineElement, PointElement, CategoryScale, LinearScale);

const Dashboard = () => {
    const [transactions, setTransactions] = useState([]);
    const [filter, setFilter] = useState('income');
    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');
    const [showToast, setShowToast] = useState(false);
    const [lastDeleted, setLastDeleted] = useState(null);

    useEffect(() => {
        document.body.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
    }, [theme]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    useEffect(() => {
        api.get('/transactions')
            .then(response => setTransactions(response.data))
            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error));
    }, []);

    const handleAddTransaction = (newTransaction) => {
        setTransactions(prev => [...prev, newTransaction]);
        setShowToast(true);
        setTimeout(() => setShowToast(false), 2000);
    };

    const handleDeleteTransaction = (id) => {
        const transactionToDelete = transactions.find(t => t.id === id);
        if (transactionToDelete) {
            setLastDeleted(transactionToDelete);
            api.delete(`/transactions/${id}`)
                .then(() => setTransactions(prev => prev.filter(t => t.id !== id)))
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error));
        }
    };

    const handleUndoDelete = () => {
        if (lastDeleted) {
            api.post('/transactions', lastDeleted)
                .then(response => {
                    setTransactions(prev => [...prev, response.data]);
                    setLastDeleted(null);
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error));
        }
    };

    const handleExportExcel = () => {
        const worksheet = XLSX.utils.json_to_sheet(transactions.map(t => ({
            –î–∞—Ç–∞: new Date(t.date).toLocaleDateString(),
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è: t.category,
            –û–ø–∏—Å–∞–Ω–∏–µ: t.description,
            –°—É–º–º–∞: t.amount,
            –¢–∏–ø: t.isIncome ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥',
        })));
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        XLSX.writeFile(workbook, '–û—Ç—á–µ—Ç.xlsx');
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const filteredTransactions = transactions
        .filter(t => {
            if (filter === 'all') return true;
            if (filter === 'income') return t.isIncome;
            if (filter === 'expense') return !t.isIncome;
            return true;
        })
        .sort((a, b) => new Date(b.date) - new Date(a.date)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∏—Å–∫–∞

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç)
    const transactionsForChart = [...transactions].sort((a, b) => new Date(a.date) - new Date(b.date)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞

    // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
    const totalBalance = transactions.reduce((acc, t) => t.isIncome ? acc + t.amount : acc - t.amount, 0);

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
    const categoriesData = filteredTransactions.reduce((acc, transaction) => {
        const category = transaction.category;
        if (!acc[category]) {
            acc[category] = { income: 0, expense: 0 };
        }
        if (transaction.isIncome) {
            acc[category].income += transaction.amount;
        } else {
            acc[category].expense += transaction.amount;
        }
        return acc;
    }, {});

    // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    const randomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;

    const chartData = {
        labels: Object.keys(categoriesData),
        datasets: [
            {
                label: '–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                data: Object.values(categoriesData).map(item => item.income + item.expense),
                backgroundColor: Object.keys(categoriesData).map(() => randomColor()), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞
                hoverOffset: 4,
            },
        ],
    };

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–æ –¥–∞—Ç–∞–º)
    const transactionsByDate = transactionsForChart.reduce((acc, transaction) => {
        const date = new Date(transaction.date).toLocaleDateString();
        if (!acc[date]) {
            acc[date] = { income: 0, expense: 0 };
        }
        transaction.isIncome
            ? acc[date].income += transaction.amount
            : acc[date].expense += transaction.amount;
        return acc;
    }, {});

    const lineChartData = {
        labels: Object.keys(transactionsByDate),
        datasets: [
            {
                label: '–î–æ—Ö–æ–¥—ã',
                data: Object.values(transactionsByDate).map(item => item.income),
                fill: false,
                borderColor: '#4CAF50',
                tension: 0.1,
            },
            {
                label: '–†–∞—Å—Ö–æ–¥—ã',
                data: Object.values(transactionsByDate).map(item => item.expense),
                fill: false,
                borderColor: '#F44336',
                tension: 0.1,
            },
        ],
    };

    return (
        <div className="container">
            <header>
                <div className="theme-switch-wrapper">
                    <label className="theme-switch">
                        <input
                            type="checkbox"
                            onChange={() => setTheme(prev => (prev === 'light' ? 'dark' : 'light'))}
                            checked={theme === 'dark'}
                        />
                        <span className="slider"></span>
                    </label>
                </div>
                <h1>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞</h1>
                <h2>–ë–∞–ª–∞–Ω—Å: {totalBalance.toLocaleString()} ‚ÇΩ</h2>
            </header>

            {showToast && <div className="toast">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ</div>}
            {lastDeleted && (
                <div className="toast">
                    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è
                    <button onClick={handleUndoDelete} style={{ marginLeft: '10px' }}>
                        –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
                    </button>
                </div>
            )}

            <section className="charts-section">
                <div className="charts-container">
                    <div className="pie-chart">
                        <h3>–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
                        <Pie data={chartData} />
                    </div>
                    <div className="line-chart">
                        <h3>–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º</h3>
                        <Line data={lineChartData} />
                    </div>
                </div>
            </section>

            <section className="main-content centered-content">
                <div className="filter-buttons">
                    <button onClick={() => setFilter('income')}>
                        –î–æ—Ö–æ–¥—ã ({transactions.filter(t => t.isIncome).length})
                    </button>
                    <button onClick={() => setFilter('expense')}>
                        –†–∞—Å—Ö–æ–¥—ã ({transactions.filter(t => !t.isIncome).length})
                    </button>
                    <button onClick={handleExportExcel} style={{ marginLeft: '10px' }}>
                        –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                    </button>
                </div>
                <TransactionForm onAddTransaction={handleAddTransaction} />
                <TransactionList
                    transactions={filteredTransactions}
                    onDeleteTransaction={handleDeleteTransaction}
                />
            </section>
        </div>
    );
};

export default Dashboard;
