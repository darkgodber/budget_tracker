import React, { useState, useEffect } from 'react';
import api from '../services/api';
import TransactionForm from '../components/TransactionForm';
import TransactionList from '../components/TransactionList';
import * as XLSX from 'xlsx';
import { Pie } from 'react-chartjs-2';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, Title, Tooltip, Legend, ArcElement, LineElement, PointElement, CategoryScale, LinearScale } from 'chart.js';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Chart.js
ChartJS.register(Title, Tooltip, Legend, ArcElement, LineElement, PointElement, CategoryScale, LinearScale);

const Dashboard = () => {
    const [transactions, setTransactions] = useState([]);
    const [filter, setFilter] = useState('all');
    const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');
    const [showToast, setShowToast] = useState(false);
    const [lastDeleted, setLastDeleted] = useState(null);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    useEffect(() => {
        document.body.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
    }, [theme]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    useEffect(() => {
        api.get('/transactions')
            .then(response => setTransactions(response.data))
            .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error));
    }, []);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const handleAddTransaction = (newTransaction) => {
        setTransactions(prev => [...prev, newTransaction]);
        setShowToast(true);
        setTimeout(() => setShowToast(false), 2000);
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å Undo
    const handleDeleteTransaction = (id) => {
        const transactionToDelete = transactions.find(t => t.id === id);
        if (transactionToDelete) {
            setLastDeleted(transactionToDelete);
            api.delete(`/transactions/${id}`)
                .then(() => setTransactions(prev => prev.filter(t => t.id !== id)))
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error));
        }
    };

    const handleUndoDelete = () => {
        if (lastDeleted) {
            api.post('/transactions', lastDeleted)
                .then(response => {
                    setTransactions(prev => [...prev, response.data]);
                    setLastDeleted(null);
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error));
        }
    };

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    const handleExportExcel = () => {
        const worksheet = XLSX.utils.json_to_sheet(transactions.map(t => ({
            –î–∞—Ç–∞: new Date(t.date).toLocaleDateString(),
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è: t.category,
            –û–ø–∏—Å–∞–Ω–∏–µ: t.description,
            –°—É–º–º–∞: t.amount,
            –¢–∏–ø: t.isIncome ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥',
        })));
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        XLSX.writeFile(workbook, '–û—Ç—á–µ—Ç.xlsx');
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const filteredTransactions = transactions
        .filter(t => {
            if (filter === 'all') return true;
            if (filter === 'income') return t.isIncome;
            if (filter === 'expense') return !t.isIncome;
            return true;
        })
        .sort((a, b) => new Date(b.date) - new Date(a.date));

    // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    const totalBalance = transactions.reduce((acc, t) => t.isIncome ? acc + t.amount : acc - t.amount, 0);

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    const income = transactions.filter(t => t.isIncome).reduce((acc, t) => acc + t.amount, 0);
    const expense = transactions.filter(t => !t.isIncome).reduce((acc, t) => acc + t.amount, 0);

    const chartData = {
        labels: ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'],
        datasets: [
            {
                data: [income, expense],
                backgroundColor: ['#4CAF50', '#F44336'],
                hoverOffset: 4,
            },
        ],
    };

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–æ –¥–∞—Ç–∞–º)
    const transactionsByDate = filteredTransactions.reduce((acc, transaction) => {
        const date = new Date(transaction.date).toLocaleDateString();
        if (!acc[date]) {
            acc[date] = { income: 0, expense: 0 };
        }
        if (transaction.isIncome) {
            acc[date].income += transaction.amount;
        } else {
            acc[date].expense += transaction.amount;
        }
        return acc;
    }, {});

    const lineChartData = {
        labels: Object.keys(transactionsByDate),
        datasets: [
            {
                label: '–î–æ—Ö–æ–¥—ã',
                data: Object.values(transactionsByDate).map(item => item.income),
                fill: false,
                borderColor: '#4CAF50',
                tension: 0.1,
            },
            {
                label: '–†–∞—Å—Ö–æ–¥—ã',
                data: Object.values(transactionsByDate).map(item => item.expense),
                fill: false,
                borderColor: '#F44336',
                tension: 0.1,
            },
        ],
    };

    return (
        <div className="container">
            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã */}
            <div className="theme-switch-wrapper">
                <label className="theme-switch">
                    <input
                        type="checkbox"
                        onChange={() => setTheme(prev => (prev === 'light' ? 'dark' : 'light'))}
                        checked={theme === 'dark'}
                    />
                    <span className="slider"></span>
                </label>
            </div>

            <h1>Dashboard</h1>
            <h2>–ë–∞–ª–∞–Ω—Å: {totalBalance.toLocaleString()} ‚ÇΩ</h2>

            {showToast && <div className="toast">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ</div>}
            {lastDeleted && (
                <div className="toast">
                    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è
                    <button onClick={handleUndoDelete} style={{ marginLeft: '10px' }}>
                        –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
                    </button>
                </div>
            )}

            {/* –ö—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ */}
            <div className="pie-chart">
                <h3>–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã</h3>
                <Pie data={chartData} />
            </div>

            {/* –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (–ø–æ –¥–∞—Ç–∞–º) */}
            <div className="line-chart">
                <h3>–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º</h3>
                <Line data={lineChartData} />
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç */}
            <div className="filter-buttons">
                <button onClick={() => setFilter('all')}>
                    –í—Å–µ ({transactions.length})
                </button>
                <button onClick={() => setFilter('income')}>
                    –î–æ—Ö–æ–¥—ã ({transactions.filter(t => t.isIncome).length})
                </button>
                <button onClick={() => setFilter('expense')}>
                    –†–∞—Å—Ö–æ–¥—ã ({transactions.filter(t => !t.isIncome).length})
                </button>
                <button onClick={handleExportExcel} style={{ marginLeft: '10px' }}>
                    –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                </button>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
            <TransactionList
                transactions={filteredTransactions}
                onDeleteTransaction={handleDeleteTransaction}
            />

            {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
            <TransactionForm onAddTransaction={handleAddTransaction} />
        </div>
    );
};

export default Dashboard;
